const express = require('express');const router = express.Router();const { Device, User } = require('../models');// POST /registerrouter.post('/register', async (req, res) => {  const { device_name, serial_number } = req.body;  const existing = await Device.findOne({ where: { serial_number } });  if (existing) return res.status(400).send("Device already exists");  await Device.create({ device_name, serial_number });  res.sendStatus(200);});// GET /devicesrouter.get('/devices', async (req, res) => {  const devices = await Device.findAll();  res.json(devices);});// POST /takerouter.post('/take', async (req, res) => {  const { user_name, serial_number } = req.body;  // Перевірка чи користувач зареєстрований  const user = await User.findOne({ where: { user_name } });  if (!user) return res.status(400).json({ error: 'User not registered' });  const device = await Device.findOne({ where: { serial_number } });  if (!device) return res.status(404).send("Device not found");  if (device.user_name) return res.status(400).send("Device already taken");  device.user_name = user_name;  await device.save();  res.sendStatus(200);});// GET /devices/:serial_numberrouter.get('/devices/:serial_number', async (req, res) => {  const device = await Device.findOne({ where: { serial_number: req.params.serial_number } });  if (!device) return res.status(404).send("Not found");  res.json(device);});router.post('/register-user', async (req, res) => {  const { user_name } = req.body;  if (!user_name) return res.status(400).json({ error: "user_name is required" });  const existing = await User.findOne({ where: { user_name } });  if (existing) return res.status(400).json({ error: "User already exists" });  await User.create({ user_name });  res.sendStatus(200);});module.exports = router;/*  const express = require('express');const router = express.Router();const {  registerDevice,  getAllDevices,  getDeviceBySerial,  takeDevice} = require('../controllers/deviceController');router.post('/register', registerDevice);router.get('/devices', getAllDevices);router.get('/devices/:serial', getDeviceBySerial);router.post('/take', takeDevice);module.exports = router;*/